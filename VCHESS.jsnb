{
  "metadata": {
    "name": "VCHESS devs only",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Multiplayer Chess</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/chessboardjs/dist/chessboard-1.0.0.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chessboard.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chess.js\"></script>\n    <style>\n        /* Add some styling to make the UI more user-friendly */\n        #status { font-size: 20px; color: #333; padding: 10px; }\n        #player-info { font-size: 18px; margin-top: 10px; }\n        #game-room-info { font-size: 16px; color: gray; }\n        #board-container { margin-top: 20px; }\n    </style>\n</head>\n<body>\n    <div id=\"status\">Checking your connection...</div>\n    <div id=\"player-info\">\n        <p>Player 1: <span id=\"player1-name\">You (White)</span></p>\n        <p>Player 2: <span id=\"player2-name\">Waiting for Player 2...</span></p>\n    </div>\n\t<div>\n  <label for=\"game-id\">Enter Game ID to join:</label>\n  <input type=\"text\" id=\"game-id\" />\n  <button id=\"join-game\">Join Game</button>\n</div>\n    <div id=\"game-room-info\"></div>\n    <div id=\"board-container\"></div>\n    \n    <script src=\"app.js\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Multiplayer Chess</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/chessboardjs/dist/chessboard-1.0.0.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chessboard.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chess.js\"></script>\n    <style>\n        /* Add some styling to make the UI more user-friendly */\n        #status { font-size: 20px; color: #333; padding: 10px; }\n        #player-info { font-size: 18px; margin-top: 10px; }\n        #game-room-info { font-size: 16px; color: gray; }\n        #board-container { margin-top: 20px; }\n    </style>\n\n\n    <div id=\"status\">Waiting for Player 2...</div>\n    <div id=\"player-info\">\n        <p>Player 1: <span id=\"player1-name\">You (White)</span></p>\n        <p>Player 2: <span id=\"player2-name\">Waiting for Player 2...</span></p>\n    </div>\n\t<div>\n  <label for=\"game-id\">Enter Game ID to join:</label>\n  <input type=\"text\" id=\"game-id\">\n  <button id=\"join-game\">Join Game</button>\n</div>\n    <div id=\"game-room-info\">Game Room ID: game_1731186393733</div>\n    <div id=\"board-container\"></div>\n    \n    <script src=\"app.js\"></script>\n\n\n",
      "type": "html"
    },
    {
      "code": "<style>\n  #status {\n            font-size: 24px;\n            font-weight: bold;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        /* Default color for the status message */\n        #status.default {\n            color: #333;\n        }\n\n        /* White's turn */\n        #status.white-turn {\n            color: white;\n            background-color: #333;\n            padding: 10px;\n        }\n\n        /* Black's turn */\n        #status.black-turn {\n            color: black;\n            background-color: #ddd;\n            padding: 10px;\n        }\n\n        /* Game over with checkmate */\n        #status.checkmate {\n            color: white;\n            background-color: red;\n            padding: 15px;\n            font-size: 28px;\n        }\n\n        /* Game over with draw/stalemate */\n        #status.draw {\n            color: black;\n            background-color: yellow;\n            padding: 15px;\n            font-size: 28px;\n        }\n</style>",
      "status": "",
      "output": "<style>\n  #status {\n            font-size: 24px;\n            font-weight: bold;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        /* Default color for the status message */\n        #status.default {\n            color: #333;\n        }\n\n        /* White's turn */\n        #status.white-turn {\n            color: white;\n            background-color: #333;\n            padding: 10px;\n        }\n\n        /* Black's turn */\n        #status.black-turn {\n            color: black;\n            background-color: #ddd;\n            padding: 10px;\n        }\n\n        /* Game over with checkmate */\n        #status.checkmate {\n            color: white;\n            background-color: red;\n            padding: 15px;\n            font-size: 28px;\n        }\n\n        /* Game over with draw/stalemate */\n        #status.draw {\n            color: black;\n            background-color: yellow;\n            padding: 15px;\n            font-size: 28px;\n        }\n</style>",
      "type": "html"
    },
    {
      "code": "await scrib.loadScript(\"https://code.jquery.com/jquery-3.5.1.min.js\");\nawait scrib.loadScript(\"https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js\");\nawait scrib.loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js\")\nawait scrib.loadCSS(\"https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.css\");\n<!-- Add Firebase SDK (for Realtime Database) -->",
      "status": "[37]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Firebase initialization (same as your previous code)\nconst firebaseAppModule = await import(\"https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js\");\nconst firebaseAuthModule = await import(\"https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js\");\nconst firebaseRealtimeDBModule = await import(\"https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js\");\nconst { initializeApp } = firebaseAppModule;\nconst { getAuth } = firebaseAuthModule;\nconst { getDatabase, ref, set, get, child, onValue } = firebaseRealtimeDBModule;\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAJrRZ6xehvVQk0PuCMhsVNfeNsJzXVmCY\",\n  authDomain: \"vchess-82304.firebaseapp.com\",\n  databaseURL: \"https://vchess-82304-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"vchess-82304\",\n  storageBucket: \"vchess-82304.firebasestorage.app\",\n  messagingSenderId: \"630416421002\",\n  appId: \"1:630416421002:web:604dabeccb74ac778f7d73\",\n  measurementId: \"G-YF3S8Y3FPK\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\n\nconst game = new Chess();  // Initialize Chess.js\n\nlet isOnline = navigator.onLine;\nif (isOnline) {\n  updateStatus(\"You are online. Waiting for Player 2...\");\n  createGameRoom();\n} else {\n  updateStatus(\"You are offline. Playing solo...\");\n  showOfflineGame();\n}\n\nfunction updateStatus(message) {\n  document.getElementById(\"status\").innerText = message;\n}\n\nfunction showOfflineGame() {\n  console.log(\"Offline mode: Solo play\");\n}\n\nfunction createGameRoom() {\n  const gameId = generateGameId();  // Generate a unique game ID\n  const gameRef = ref(db, \"games/\" + gameId);\n\n  // Set the game state in Firebase\n  set(gameRef, {\n    player1: {\n      name: \"Player 1\",\n      color: \"w\"\n    },\n    gameState: {\n      board: game.fen(),\n      turn: \"w\"\n    },\n    moves: []  // Empty moves array for now\n  }).then(() => {\n    console.log(\"Game room created with ID:\", gameId);\n    updateGameRoomInfo(gameId);\n    watchForOpponent(gameId);\n  }).catch(error => {\n    console.error(\"Error creating game room:\", error);\n  });\n}\n\nfunction updateGameRoomInfo(gameId) {\n  document.getElementById(\"game-room-info\").innerText = \"Game Room ID: \" + gameId;\n}\n\nfunction watchForOpponent(gameId) {\n  const gameRef = ref(db, \"games/\" + gameId);\n\n  onValue(gameRef, (snapshot) => {\n    const gameData = snapshot.val();\n    if (gameData && !gameData.player2) {\n      updateStatus(\"Waiting for Player 2...\");\n      document.getElementById(\"player2-name\").innerText = \"Waiting for Player 2...\";\n    } else {\n      updateStatus(\"Player 2 has joined. Starting the game!\");\n      document.getElementById(\"player2-name\").innerText = gameData.player2 ? gameData.player2.name : \"Player 2\";\n      startGame(gameId);\n    }\n  });\n}\n\nfunction startGame(gameId) {\n  const board = Chessboard('#board-container', {\n    draggable: true,\n    dropOffBoard: 'trash',\n    sparePieces: true\n  });\n\n  board.start();\n\n  // Listen to move changes and update Firebase\n  board.on('drop', (source, target) => {\n    onMoveMade(gameId, source, target);\n  });\n}\n\nfunction onMoveMade(gameId, source, target) {\n  const gameRef = ref(db, \"games/\" + gameId);\n  const gameState = new Chess(game.fen());  // Use the current FEN for move\n\n  const move = gameState.move({ from: source, to: target, promotion: 'q' });\n\n  if (move === null) return \"snapback\";\n\n  // Push move to Firebase\n  const movesRef = child(gameRef, \"moves\");\n  const newMoveRef = push(movesRef);\n  set(newMoveRef, move.san);\n\n  // Update the game state in Firebase\n  set(gameRef, {\n    player1: gameData.player1,\n    player2: gameData.player2,\n    gameState: {\n      board: gameState.fen(),\n      turn: gameState.turn()\n    },\n    moves: gameData.moves\n  });\n\n  // Update the chessboard and the move history in the UI\n  board.position(gameState.fen());\n  updateMoveHistory(move.san);\n}\n\nfunction updateMoveHistory(move) {\n  const moveHistoryElement = document.getElementById('movesList');\n  const moveItem = document.createElement('li');\n  moveItem.textContent = move;\n  moveHistoryElement.appendChild(moveItem);\n}\n\nfunction generateGameId() {\n  return \"game_\" + new Date().getTime();\n}\n\ndocument.getElementById(\"join-game\").addEventListener(\"click\", function() {\n  const gameId = document.getElementById(\"game-id\").value;\n  if (gameId) {\n    joinGame(gameId);\n  } else {\n    alert(\"Please enter a valid game ID.\");\n  }\n});\n",
      "status": "[38]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<style>\n        /* Status message styles */\n        #status {\n            font-size: 24px;\n            font-weight: bold;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        /* Default color for the status message */\n        #status.default {\n            color: #333;\n        }\n\n        /* White's turn */\n        #status.white-turn {\n            color: white;\n            background-color: #333;\n            padding: 10px;\n        }\n\n        /* Black's turn */\n        #status.black-turn {\n            color: black;\n            background-color: #ddd;\n            padding: 10px;\n        }\n\n        /* Game over with checkmate */\n        #status.checkmate {\n            color: white;\n            background-color: red;\n            padding: 15px;\n            font-size: 28px;\n        }\n\n        /* Game over with draw/stalemate */\n        #status.draw {\n            color: black;\n            background-color: yellow;\n            padding: 15px;\n            font-size: 28px;\n        }\n    </style>",
      "status": "",
      "output": "<style>\n        /* Status message styles */\n        #status {\n            font-size: 24px;\n            font-weight: bold;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        /* Default color for the status message */\n        #status.default {\n            color: #333;\n        }\n\n        /* White's turn */\n        #status.white-turn {\n            color: white;\n            background-color: #333;\n            padding: 10px;\n        }\n\n        /* Black's turn */\n        #status.black-turn {\n            color: black;\n            background-color: #ddd;\n            padding: 10px;\n        }\n\n        /* Game over with checkmate */\n        #status.checkmate {\n            color: white;\n            background-color: red;\n            padding: 15px;\n            font-size: 28px;\n        }\n\n        /* Game over with draw/stalemate */\n        #status.draw {\n            color: black;\n            background-color: yellow;\n            padding: 15px;\n            font-size: 28px;\n        }\n    </style>",
      "type": "html"
    },
    {
      "code": "// Initialize SpeechRecognition and set properties\nvar SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nvar recognition = new SpeechRecognition();\nrecognition.lang = 'en-US';\nrecognition.interimResults = false;\nrecognition.maxAlternatives = 1;\n\n// Set flags to manage the state\nlet isRecognitionActive = false;\n\n// Handle recognition errors\nrecognition.onerror = function(event) {\n  console.error(\"Speech recognition error:\", event.error);\n  scrib.show(\"Speech recognition error:\", event.error);\n};\n\n// Handle start and end events\nrecognition.onstart = function() {\n  isRecognitionActive = true;\n  console.log(\"Speech recognition started.\");\n  scrib.show(\"Speech recognition started. Please speak your move.\");\n};\n\nrecognition.onend = function() {\n  isRecognitionActive = false;\n  console.log(\"Speech recognition stopped.\");\n  scrib.show(\"Speech recognition stopped.\");\n};\n\n// Handle speech results\nrecognition.onresult = function(event) {\n  var transcript = event.results[0][0].transcript.toLowerCase();\n  console.log(\"Voice command received:\", transcript);\n  scrib.show(\"Voice command received:\", transcript);\n  processVoiceCommand(transcript);\n};\n\n// Function to start recognition safely\nfunction startRecognition() {\n  if (isRecognitionActive) {\n    recognition.stop(); // Stop recognition if already active\n  }\n  recognition.start(); // Start recognition\n}\n\n// Start listening on a button click\ndocument.getElementById('startVoiceControl').addEventListener('click', function() {\n  startRecognition();\n  console.log(\"Voice control started. Please speak your move.\");\n  scrib.show(\"Voice control started. Please speak your move.\");\n});\n\n// Process voice command and handle moves\nfunction processVoiceCommand(command) {\n  // Regular expression to capture \"move [piece] [source] to [target]\" pattern\n  var movePattern = /(?:move\\s+)?(?:(pawn|knight|bishop|rook|queen|king)\\s+)?([a-h][1-8])\\s+to\\s+([a-h][1-8])/i;\n  \n  // Check if the voice command matches the pattern\n  var moveMatch = command.match(movePattern);\n  \n  if (moveMatch) {\n    var piece = moveMatch[1] ? moveMatch[1].toLowerCase() : null; // Capture piece if specified\n    var sourceSquare = moveMatch[2];\n    var targetSquare = moveMatch[3];\n    \n    // If no piece specified, detect piece on the source square\n    if (!piece) {\n      var pieceOnSource = game.get(sourceSquare);\n      if (pieceOnSource) {\n        piece = pieceOnSource.type; // Get piece type from board\n      } else {\n        scrib.show(`No piece found on ${sourceSquare}. Try a valid source square.`);\n        return;\n      }\n    }\n\n    // Map pieces to their chess notation\n    var pieceNotation = {\n      p: '',   // Pawn (no notation)\n      n: 'N',  // Knight\n      b: 'B',  // Bishop\n      r: 'R',  // Rook\n      q: 'Q',  // Queen\n      k: 'K'   // King\n    };\n    var pieceSymbol = pieceNotation[piece[0]];\n\n    // Find the valid source square for the piece and target square\n    var sourceSquareFound = findSourceSquare(pieceSymbol, sourceSquare, targetSquare);\n\n    if (sourceSquareFound) {\n      // Execute the move if it's legal\n      var move = game.move({\n        from: sourceSquareFound,\n        to: targetSquare,\n        promotion: 'q' // Auto-promote to queen\n      });\n\n      if (move) {\n        board2.position(game.fen());\n        updateStatus();\n        updateMoveHistory(move.san);\n        scrib.show(`Move executed: ${piece} from ${sourceSquareFound} to ${targetSquare}`);\n      } else {\n        scrib.show(\"Illegal move. Try again.\");\n        console.error(\"Illegal move attempted:\", sourceSquareFound, \"to\", targetSquare);\n      }\n    } else {\n      scrib.show(\"Could not determine a valid source square for the move.\");\n    }\n  } else {\n    scrib.show(\"Invalid command format. Please say moves like 'move e2 to e3' or 'move knight g1 to f3'.\");\n  }\n}\n\n// Find source square for specified piece and target\nfunction findSourceSquare(pieceSymbol, sourceSquare, targetSquare) {\n  var moves = game.moves({ verbose: true });\n  var matchingMoves = moves.filter(function(m) {\n    return (!pieceSymbol || m.piece === pieceSymbol.toLowerCase()) && m.from === sourceSquare && m.to === targetSquare;\n  });\n\n  return matchingMoves.length > 0 ? matchingMoves[0].from : null;\n}\n\n\n// Chessboard and game event functions\nvar board2 = ChessBoard('board2', {\n      draggable: true,\n      pieceTheme: 'https://chessboardjs.com/img/chesspieces/alpha/{piece}.png',\n      dropOffBoard: 'trash',\n      onDragStart: onDragStart,\n      onDrop: onDrop,\n      onSnapEnd: onSnapEnd\n    });\n\n    var game = new Chess();\n    var gameOver = false; // Flag to track if the game is over\n\n    // Function to prevent illegal moves or moves by the wrong player\n    function onDragStart(source, piece, position, orientation) {\n      if (gameOver) return false; // Disable dragging if the game is over\n      if ((game.turn() === 'w' && piece.startsWith('b')) || \n          (game.turn() === 'b' && piece.startsWith('w'))) {\n        return false;\n      }\n    }\n\n    // Function to handle piece drop and validate move\n    function onDrop(source, target) {\n      if (gameOver) return 'snapback'; // Disable dropping if the game is over\n\n      var move = game.move({\n        from: source,\n        to: target,\n        promotion: 'q'  // Auto-promote to queen for simplicity\n      });\n\n      if (move === null) return 'snapback';  // Illegal move\n      updateStatus();  // Update game status after each valid move\n      updateMoveHistory(move.san);  // Add the move to the move history\n    }\n\n    // Sync board position with game state after each move\n    function onSnapEnd() {\n      board2.position(game.fen());\n    }\n\n    // Function to update board and game status\n    function updateStatus() {\n      var status = '';\n\n      if (game.in_checkmate()) {\n        status = 'Game over, ' + (game.turn() === 'w' ? 'White' : 'Black') + ' is in checkmate.';\n        gameOver = true; // Set game over flag\n      } else if (game.in_draw() || game.in_stalemate() || game.in_threefold_repetition() || game.insufficient_material()) {\n        status = 'Game over, it\\'s a draw!';\n        gameOver = true; // Set game over flag\n      } else {\n        status = (game.turn() === 'w' ? 'White' : 'Black') + ' to move';\n        if (game.in_check()) {\n          status += ', in check!';\n        }\n      }\n\n      document.getElementById('status').innerText = status; // Display status message\n    }\n\n    // Function to update move history display\n    var moveHistory = []; // To store the move history\n\n    function updateMoveHistory(move) {\n  // Add the move to the history\n  moveHistory.push(move);\n\n  // Keep only the most recent 8 moves\n  if (moveHistory.length > 8) {\n    moveHistory.shift(); // Remove the oldest move\n  }\n\n  // Update the move list display\n  var movesList = document.getElementById('movesList');\n  movesList.innerHTML = ''; // Clear the current move list\n\n  // Iterate over the history and display moves in the required format\n  moveHistory.forEach(function (move, index) {\n    // If it's the first move (index 0), calculate the turn explicitly\n    var currentTurn = (index % 2 === 0) ? 'w' : 'b'; // White moves first (even index is white)\n\n    // Get the color and piece from the move and format it\n    var moveText = formatMove(move, currentTurn); // Use calculated turn for formatting\n    var moveItem = document.createElement('div');\n    moveItem.textContent = moveText;\n    movesList.appendChild(moveItem);\n  });\n}\n\n\n    // Format the move as \"white-pawn-d6\" or \"black-pawn-d5\"\nfunction formatMove(move, turn) {\n  // Determine the color of the player making the move\n  var color = (turn === 'w') ? 'white' : 'black'; // 'w' for white and 'b' for black\n  \n  // Map the first character to the piece type\n  var piece;\n  var moveIndex = 0;  // To track if the move starts with a piece character\n  \n  // Check if the first character is a valid piece (Knight, Rook, King, Queen)\n  if (move.charAt(0) === 'N') {\n    piece = 'knight';\n    moveIndex = 1;  // Skip the first character (since it's part of the piece)\n  } else if (move.charAt(0) === 'R') {\n    piece = 'rook';\n    moveIndex = 1;\n  } else if (move.charAt(0) === 'K') {\n    piece = 'king';\n    moveIndex = 1;\n  } else if (move.charAt(0) === 'Q') {\n    piece = 'queen';\n    moveIndex = 1;\n  } else if (move.charAt(0) === 'B') {\n    piece = 'bishop';\n    moveIndex = 1;\n  } else {\n    piece = 'pawn';  // If no piece character, it's a pawn\n    moveIndex = 0;  // No need to skip any character\n  }\n\n  // Remove any capture or check symbols for easier parsing\n  var cleanedMove = move.replace(/[x+]/g, ''); // Remove 'x' (captures) and '+' (checks)\n\n  // Determine the target square (last two characters of the move)\n  var targetSquare = cleanedMove.slice(-2);\n\n  // Handle pawn captures and simple moves\n  if (piece === 'pawn') {\n    if (move.length > 3) {\n      // Pawn capture move (e.g., e5xd6 -> white-pawn-e5-x-d6)\n      var captureSquare = move.slice(2, 4);  // Capture destination (e.g., \"d6\" in e5xd6)\n      return color + '-pawn-' + '-x-' + captureSquare;\n    } else {\n      // Simple pawn move (e.g., e2-e4 -> white-pawn-e4)\n      return color + '-pawn-' + targetSquare;\n    }\n  } else {\n    // Handle non-pawn pieces (e.g., Knight, Rook, etc.)\n    var capture = move.includes('x'); // Check if it's a capture (e.g., Rxd4)\n\n    if (capture) {\n      // Format capture moves (e.g., Rook capture: Rxd5 -> white-rook-d4-x-d5)\n      return color + '-' + piece + '-' + '-x-' + targetSquare;\n    } else {\n      // Non-capture piece move (e.g., Knight move: Nf3 -> white-knight-f3)\n      return color + '-' + piece + '-' + targetSquare;\n    }\n  }\n}\n\n\n\n\n    // Button controls to reset and clear the board\n    document.getElementById('startBtn').addEventListener('click', function() {\n      game.reset();  // Reset chess game\n      board2.start(); // Reset chessboard visualization\n      gameOver = false; // Reset game over flag\n      updateStatus(); // Update the status\n      document.getElementById('movesList').innerHTML = '';  // Clear the move history\n\t  moveHistory = [];\n    });\n\n    document.getElementById('clearBtn').addEventListener('click', function() {\n      game.clear();   // Clear chess game\n      board2.clear(); // Clear chessboard visualization\n      gameOver = false; // Reset game over flag\n      document.getElementById('status').innerText = 'Board cleared.'; // Clear status\n      document.getElementById('movesList').innerHTML = '';  // Clear the move history\n    });\n\n    updateStatus();",
      "status": "[-]",
      "output": "<p class=\"error\">Cannot read properties of null (reading 'addEventListener')</p>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}